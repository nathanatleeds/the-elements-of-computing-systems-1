// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/03/a/PC.hdl

/**
 * A 16-bit counter with load and reset control bits.
 * if      (reset[t] == 1) out[t+1] = 0
 * else if (load[t] == 1)  out[t+1] = in[t]
 * else if (inc[t] == 1)   out[t+1] = out[t] + 1  (integer addition)
 * else                    out[t+1] = out[t]
 */

CHIP PC {
    IN in[16],load,inc,reset;
    OUT out[16];

    PARTS:
    // load bit shall be `1` if any of the control bits are
    Or(a=load, b=reset, out=l1);
    Or(a=l1, b=inc, out=l2);
    Register(in=rIn, load=l2, out=rOut);
        // Mux16(a=rOut, b=in, sel=load, out=loadOut);

    // reset
    Mux16(a=rOut, b=false, sel=reset, out=resetOut);

    // inc
    Inc16(in=rOut, out=incOut);
        // Mux16(a=rOut, b=rIncOut, sel=inc, out=incOut);

    // Mux8 000: a; 001: load, b; 010: reset, c; 100: inc, e
    // When more than one control bit enabled:
    // 101: load & inc, f; 110: reset & inc, g; 111: h; 011: reset & load, d
    // Precedency: reset > load > inc
    Mux8Way16(a=rOut, b=in, c=false, d=false, e=incOut, f=in, g=false, h=false, sel[0]=load, sel[1]=reset, sel[2]=inc, out=rIn);

    //Final output
    Mux16(a=rOut, b=false, sel=false, out=out);
}

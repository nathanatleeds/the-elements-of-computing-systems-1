// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Decode
    And(a=true, b=instruction[15], out=isCIns);
    Not(in=isCIns, out=isAIns);

    // The d-bits in C instructions
    And(a=true, b=instruction[3], out=destM);
    And(a=true, b=instruction[4], out=destD);
    And(a=true, b=instruction[5], out=destA);
    And(a=destM, b=isCIns, out=loadM);
    And(a=destD, b=isCIns, out=loadD);
    // If isAIns || (isCIns && destA), then load A register
    And(a=destA, b=isCIns, out=CInsLoadA);
    Or(a=CInsLoadA, b=isAIns, out=loadA);

    
    // Register D
    DRegister(in=ALUOut, load=loadD, out=DOut);
    // Register A
    Mux16(a=instruction, b=ALUOut, sel=CInsLoadA, out=AIn);
    ARegister(in=AIn, load=loadA, out=AOut);

    // a-bit, load M[A] or A
    Mux16(a=AOut, b=inM, sel=instruction[12], out=AMOut);

    // Output to M
    And(a=true, b=loadM, out=writeM);
    Mux16(a=false, b=ALUOut, sel=loadM, out=outM);
    Mux16(a=AOut, b=AOut, sel=false, out[0..14]=addressM);





    ALU(x=DOut, y=AMOut, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUOut, zr=zrALU, ng=ngALU);




    // Whether ALUOut is positive
    Or(a=zrALU, b=ngALU, out=zrngOr);
    Not(in=zrngOr, out=pos);

    // Check if j-bits equals to the ng-zr-pos bit pattern
    // (x And y) Or (x Nand y)
//    BitCmp3(x[0]=pos, x[1]=zrALU, x[2]=ngALU, y[0]=instruction[0], y[1]=instruction[1], y[2]=instruction[2], out=eql);

    // o pos, 1 zr, 2 ng
    And(a=instruction[0], b=pos, out=posAnd);
    And(a=instruction[1], b=zrALU, out=zrAnd);
    And(a=instruction[2], b=ngALU, out=ngAnd);

    Or(a=posAnd, b=zrAnd, out=or1);
    Or(a=ngAnd, b=or1, out=jmpOK);

    // Make sure it's a C instruction
    And(a=jmpOK, b=isCIns, out=loadPC);

    PC(in=AOut, load=loadPC, inc=true, reset=reset, out[0..14]=pc);
}